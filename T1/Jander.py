# Generated from Jander.g4 by ANTLR 4.13.1
from antlr4 import *
#Importando função que já deveria ter sido importada mas o python não quis
from antlr4.error.Errors import LexerNoViableAltException
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,355,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,252,
        8,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,260,8,1,1,2,4,2,263,8,2,11,2,12,
        2,264,1,3,4,3,268,8,3,11,3,12,3,269,1,3,1,3,4,3,274,8,3,11,3,12,
        3,275,3,3,278,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,303,8,4,1,5,1,
        5,5,5,307,8,5,10,5,12,5,310,9,5,1,6,1,6,5,6,314,8,6,10,6,12,6,317,
        9,6,1,6,1,6,1,7,1,7,5,7,323,8,7,10,7,12,7,326,9,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,9,1,9,5,9,338,8,9,10,9,12,9,341,9,9,1,9,1,9,
        1,9,5,9,346,8,9,10,9,12,9,349,9,9,1,9,3,9,352,8,9,1,9,1,9,4,315,
        324,339,347,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,
        0,9,3,0,40,41,44,44,58,58,4,0,38,38,46,46,91,91,93,94,6,0,37,37,
        42,43,45,45,47,47,60,60,62,62,2,0,65,90,97,122,4,0,48,57,65,90,95,
        95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,34,34,1,0,125,
        125,407,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,1,251,1,0,0,0,3,259,1,0,0,0,5,262,1,0,0,0,7,267,1,0,0,0,9,302,
        1,0,0,0,11,304,1,0,0,0,13,311,1,0,0,0,15,320,1,0,0,0,17,331,1,0,
        0,0,19,351,1,0,0,0,21,22,5,97,0,0,22,23,5,108,0,0,23,24,5,103,0,
        0,24,25,5,111,0,0,25,26,5,114,0,0,26,27,5,105,0,0,27,28,5,116,0,
        0,28,29,5,109,0,0,29,252,5,111,0,0,30,31,5,100,0,0,31,32,5,101,0,
        0,32,33,5,99,0,0,33,34,5,108,0,0,34,35,5,97,0,0,35,36,5,114,0,0,
        36,252,5,101,0,0,37,38,5,102,0,0,38,39,5,105,0,0,39,40,5,109,0,0,
        40,41,5,95,0,0,41,42,5,97,0,0,42,43,5,108,0,0,43,44,5,103,0,0,44,
        45,5,111,0,0,45,46,5,114,0,0,46,47,5,105,0,0,47,48,5,116,0,0,48,
        49,5,109,0,0,49,252,5,111,0,0,50,51,5,108,0,0,51,52,5,101,0,0,52,
        53,5,105,0,0,53,252,5,97,0,0,54,55,5,101,0,0,55,56,5,115,0,0,56,
        57,5,99,0,0,57,58,5,114,0,0,58,59,5,101,0,0,59,60,5,118,0,0,60,252,
        5,97,0,0,61,62,5,108,0,0,62,63,5,105,0,0,63,64,5,116,0,0,64,65,5,
        101,0,0,65,66,5,114,0,0,66,67,5,97,0,0,67,252,5,108,0,0,68,69,5,
        105,0,0,69,70,5,110,0,0,70,71,5,116,0,0,71,72,5,101,0,0,72,73,5,
        105,0,0,73,74,5,114,0,0,74,252,5,111,0,0,75,76,5,114,0,0,76,77,5,
        101,0,0,77,78,5,97,0,0,78,252,5,108,0,0,79,80,5,108,0,0,80,81,5,
        111,0,0,81,82,5,103,0,0,82,83,5,105,0,0,83,84,5,99,0,0,84,252,5,
        111,0,0,85,252,5,101,0,0,86,87,5,111,0,0,87,252,5,117,0,0,88,89,
        5,110,0,0,89,90,5,97,0,0,90,252,5,111,0,0,91,92,5,115,0,0,92,252,
        5,101,0,0,93,94,5,101,0,0,94,95,5,110,0,0,95,96,5,116,0,0,96,97,
        5,97,0,0,97,252,5,111,0,0,98,99,5,115,0,0,99,100,5,101,0,0,100,101,
        5,110,0,0,101,102,5,97,0,0,102,252,5,111,0,0,103,104,5,102,0,0,104,
        105,5,105,0,0,105,106,5,109,0,0,106,107,5,95,0,0,107,108,5,115,0,
        0,108,252,5,101,0,0,109,110,5,99,0,0,110,111,5,97,0,0,111,112,5,
        115,0,0,112,252,5,111,0,0,113,114,5,115,0,0,114,115,5,101,0,0,115,
        116,5,106,0,0,116,252,5,97,0,0,117,118,5,102,0,0,118,119,5,105,0,
        0,119,120,5,109,0,0,120,121,5,95,0,0,121,122,5,99,0,0,122,123,5,
        97,0,0,123,124,5,115,0,0,124,252,5,111,0,0,125,126,5,112,0,0,126,
        127,5,97,0,0,127,128,5,114,0,0,128,252,5,97,0,0,129,130,5,97,0,0,
        130,131,5,116,0,0,131,252,5,101,0,0,132,133,5,102,0,0,133,134,5,
        97,0,0,134,135,5,99,0,0,135,252,5,97,0,0,136,137,5,102,0,0,137,138,
        5,105,0,0,138,139,5,109,0,0,139,140,5,95,0,0,140,141,5,112,0,0,141,
        142,5,97,0,0,142,143,5,114,0,0,143,252,5,97,0,0,144,145,5,101,0,
        0,145,146,5,110,0,0,146,147,5,113,0,0,147,148,5,117,0,0,148,149,
        5,97,0,0,149,150,5,110,0,0,150,151,5,116,0,0,151,252,5,111,0,0,152,
        153,5,102,0,0,153,154,5,105,0,0,154,155,5,109,0,0,155,156,5,95,0,
        0,156,157,5,101,0,0,157,158,5,110,0,0,158,159,5,113,0,0,159,160,
        5,117,0,0,160,161,5,97,0,0,161,162,5,110,0,0,162,163,5,116,0,0,163,
        252,5,111,0,0,164,165,5,114,0,0,165,166,5,101,0,0,166,167,5,103,
        0,0,167,168,5,105,0,0,168,169,5,115,0,0,169,170,5,116,0,0,170,171,
        5,114,0,0,171,252,5,111,0,0,172,173,5,102,0,0,173,174,5,105,0,0,
        174,175,5,109,0,0,175,176,5,95,0,0,176,177,5,114,0,0,177,178,5,101,
        0,0,178,179,5,103,0,0,179,180,5,105,0,0,180,181,5,115,0,0,181,182,
        5,116,0,0,182,183,5,114,0,0,183,252,5,111,0,0,184,185,5,116,0,0,
        185,186,5,105,0,0,186,187,5,112,0,0,187,252,5,111,0,0,188,189,5,
        112,0,0,189,190,5,114,0,0,190,191,5,111,0,0,191,192,5,99,0,0,192,
        193,5,101,0,0,193,194,5,100,0,0,194,195,5,105,0,0,195,196,5,109,
        0,0,196,197,5,101,0,0,197,198,5,110,0,0,198,199,5,116,0,0,199,252,
        5,111,0,0,200,201,5,102,0,0,201,202,5,105,0,0,202,203,5,109,0,0,
        203,204,5,95,0,0,204,205,5,112,0,0,205,206,5,114,0,0,206,207,5,111,
        0,0,207,208,5,99,0,0,208,209,5,101,0,0,209,210,5,100,0,0,210,211,
        5,105,0,0,211,212,5,109,0,0,212,213,5,101,0,0,213,214,5,110,0,0,
        214,215,5,116,0,0,215,252,5,111,0,0,216,217,5,118,0,0,217,218,5,
        97,0,0,218,252,5,114,0,0,219,220,5,102,0,0,220,221,5,117,0,0,221,
        222,5,110,0,0,222,223,5,99,0,0,223,224,5,97,0,0,224,252,5,111,0,
        0,225,226,5,102,0,0,226,227,5,105,0,0,227,228,5,109,0,0,228,229,
        5,95,0,0,229,230,5,102,0,0,230,231,5,117,0,0,231,232,5,110,0,0,232,
        233,5,99,0,0,233,234,5,97,0,0,234,252,5,111,0,0,235,236,5,114,0,
        0,236,237,5,101,0,0,237,238,5,116,0,0,238,239,5,111,0,0,239,240,
        5,114,0,0,240,241,5,110,0,0,241,252,5,101,0,0,242,243,5,99,0,0,243,
        244,5,111,0,0,244,245,5,110,0,0,245,246,5,115,0,0,246,247,5,116,
        0,0,247,248,5,97,0,0,248,249,5,110,0,0,249,250,5,116,0,0,250,252,
        5,101,0,0,251,21,1,0,0,0,251,30,1,0,0,0,251,37,1,0,0,0,251,50,1,
        0,0,0,251,54,1,0,0,0,251,61,1,0,0,0,251,68,1,0,0,0,251,75,1,0,0,
        0,251,79,1,0,0,0,251,85,1,0,0,0,251,86,1,0,0,0,251,88,1,0,0,0,251,
        91,1,0,0,0,251,93,1,0,0,0,251,98,1,0,0,0,251,103,1,0,0,0,251,109,
        1,0,0,0,251,113,1,0,0,0,251,117,1,0,0,0,251,125,1,0,0,0,251,129,
        1,0,0,0,251,132,1,0,0,0,251,136,1,0,0,0,251,144,1,0,0,0,251,152,
        1,0,0,0,251,164,1,0,0,0,251,172,1,0,0,0,251,184,1,0,0,0,251,188,
        1,0,0,0,251,200,1,0,0,0,251,216,1,0,0,0,251,219,1,0,0,0,251,225,
        1,0,0,0,251,235,1,0,0,0,251,242,1,0,0,0,252,2,1,0,0,0,253,260,7,
        0,0,0,254,255,5,46,0,0,255,260,5,46,0,0,256,257,5,60,0,0,257,260,
        5,45,0,0,258,260,7,1,0,0,259,253,1,0,0,0,259,254,1,0,0,0,259,256,
        1,0,0,0,259,258,1,0,0,0,260,4,1,0,0,0,261,263,2,48,57,0,262,261,
        1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,6,1,
        0,0,0,266,268,2,48,57,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,
        1,0,0,0,269,270,1,0,0,0,270,277,1,0,0,0,271,273,5,46,0,0,272,274,
        2,48,57,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,
        1,0,0,0,276,278,1,0,0,0,277,271,1,0,0,0,277,278,1,0,0,0,278,8,1,
        0,0,0,279,303,7,2,0,0,280,281,5,60,0,0,281,303,5,61,0,0,282,283,
        5,62,0,0,283,303,5,61,0,0,284,303,5,61,0,0,285,286,5,60,0,0,286,
        303,5,62,0,0,287,288,5,102,0,0,288,289,5,97,0,0,289,290,5,108,0,
        0,290,291,5,115,0,0,291,303,5,111,0,0,292,293,5,118,0,0,293,294,
        5,101,0,0,294,295,5,114,0,0,295,296,5,100,0,0,296,297,5,97,0,0,297,
        298,5,100,0,0,298,299,5,101,0,0,299,300,5,105,0,0,300,301,5,114,
        0,0,301,303,5,111,0,0,302,279,1,0,0,0,302,280,1,0,0,0,302,282,1,
        0,0,0,302,284,1,0,0,0,302,285,1,0,0,0,302,287,1,0,0,0,302,292,1,
        0,0,0,303,10,1,0,0,0,304,308,7,3,0,0,305,307,7,4,0,0,306,305,1,0,
        0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,12,1,0,0,
        0,310,308,1,0,0,0,311,315,5,34,0,0,312,314,8,5,0,0,313,312,1,0,0,
        0,314,317,1,0,0,0,315,316,1,0,0,0,315,313,1,0,0,0,316,318,1,0,0,
        0,317,315,1,0,0,0,318,319,5,34,0,0,319,14,1,0,0,0,320,324,5,123,
        0,0,321,323,8,5,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,325,1,0,
        0,0,324,322,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,5,125,
        0,0,328,329,1,0,0,0,329,330,6,7,0,0,330,16,1,0,0,0,331,332,7,6,0,
        0,332,333,1,0,0,0,333,334,6,8,0,0,334,18,1,0,0,0,335,339,5,34,0,
        0,336,338,8,7,0,0,337,336,1,0,0,0,338,341,1,0,0,0,339,340,1,0,0,
        0,339,337,1,0,0,0,340,342,1,0,0,0,341,339,1,0,0,0,342,352,7,5,0,
        0,343,347,5,123,0,0,344,346,8,8,0,0,345,344,1,0,0,0,346,349,1,0,
        0,0,347,348,1,0,0,0,347,345,1,0,0,0,348,350,1,0,0,0,349,347,1,0,
        0,0,350,352,7,5,0,0,351,335,1,0,0,0,351,343,1,0,0,0,352,353,1,0,
        0,0,353,354,6,9,1,0,354,20,1,0,0,0,14,0,251,259,264,269,275,277,
        302,308,315,324,339,347,351,2,6,0,0,1,9,0
    ]

class Jander(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PALAVRA_CHAVE = 1
    SIMBOLO_RESERV = 2
    NUM_INT = 3
    NUM_REAL = 4
    MATH = 5
    IDENT = 6
    CADEIA = 7
    COMENTARIO = 8
    WS = 9
    ERROR = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PALAVRA_CHAVE", "SIMBOLO_RESERV", "NUM_INT", "NUM_REAL", "MATH", 
            "IDENT", "CADEIA", "COMENTARIO", "WS", "ERROR" ]

    ruleNames = [ "PALAVRA_CHAVE", "SIMBOLO_RESERV", "NUM_INT", "NUM_REAL", 
                  "MATH", "IDENT", "CADEIA", "COMENTARIO", "WS", "ERROR" ]

    grammarFileName = "Jander.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[9] = self.ERROR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ERROR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.notifyListeners(LexerNoViableAltException(self, input, 0, None))
     


